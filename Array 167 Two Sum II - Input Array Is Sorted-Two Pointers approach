'''167. Two Sum II - Input Array Is Sorted
Attempted
Medium
Topics
Companies

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.



Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
'''
#i think this two sum 2 can be solved two sum hashmap approach-try it later
class solution:
    def twosum(self,numbers,target):
        l=0
        r=len(numbers)-1
        while l<r: #just for name sake to run a loop because array is already sorted so no issue with this line
            num=numbers[l]+numbers[r]
            if num>target:
                r-=1
            elif num<target:
                l+=1
            else:
                return [l+1,r+1]

numbers = [2, 7, 11, 15]
target = 9
numbers1 = [2,3,4]
target1 = 6
numbers2 = [-1,0]
target2 = -1
soln=solution()
print(soln.twosum(numbers,target))
print(soln.twosum(numbers1,target1))
print(soln.twosum(numbers2,target2))